%{ 	 
#include <stdio.h>
#include <string.h>
int lines = 0;
%} 

%option noyywrap
%option caseless

DIGIT 		[0-9]
WORD		\"[a-zA-Z0-9]*\"
NUMBER		[+-]?[1-9][0-9]*|0$
CHARACTER 	\'[a-zA-Z0-9]\'
CONST		{WORD}|{NUMBER}|{CHARACTER}
ID 		[a-zA-Z][a-zA-Z0-9_]*

%%

space         {printf("Reserved word: %s\n", yytext);}
char          {printf("Reserved word: %s\n", yytext);}
real          {printf("Reserved word: %s\n", yytext);}
let           {printf("Reserved word: %s\n", yytext);}
const         {printf("Reserved word: %s\n", yytext);}
if            {printf("Reserved word: %s\n", yytext);}
else          {printf("Reserved word: %s\n", yytext);}
do            {printf("Reserved word: %s\n", yytext);}
while         {printf("Reserved word: %s\n", yytext);}
for           {printf("Reserved word: %s\n", yytext);}
int           {printf("Reserved word: %s\n", yytext);}
class         {printf("Reserved word: %s\n", yytext);}
struct        {printf("Reserved word: %s\n", yytext);}
string        {printf("Reserved word: %s\n", yytext);}
float         {printf("Reserved word: %s\n", yytext);}
char          {printf("Reserved word: %s\n", yytext);}
boolean       {printf("Reserved word: %s\n", yytext);}
read          {printf("Reserved word: %s\n", yytext);}
readInt       {printf("Reserved word: %s\n", yytext);}
console       {printf("Reserved word: %s\n", yytext);}
return        {printf("Reserved word: %s\n", yytext);}
array         {printf("Reserved word: %s\n", yytext);}
any           {printf("Reserved word: %s\n", yytext);}
of            {printf("Reserved word: %s\n", yytext);}
in            {printf("Reserved word: %s\n", yytext);}
foreach       {printf("Reserved word: %s\n", yytext);}
map           {printf("Reserved word: %s\n", yytext);}
function      {printf("Reserved word: %s\n", yytext);}
log           {printf("Reserved word: %s\n", yytext);}
return        {printf("Reserved word: %s\n", yytext);}
var           {printf("Reserved word: %s\n", yytext);}

{ID}	{printf( "Identifier: %s\n", yytext );}

{CONST}	{printf( "Constant: %s\n", yytext );}

":"	    {printf( "Separator: %s\n", yytext );}
";"	    {printf( "Separator: %s\n", yytext );}
","	    {printf( "Separator: %s\n", yytext );}
"."	    {printf( "Separator: %s\n", yytext );}
"{"	    {printf( "Separator: %s\n", yytext );}
"}"	    {printf( "Separator: %s\n", yytext );}
"("	    {printf( "Separator: %s\n", yytext );}
")"	    {printf( "Separator: %s\n", yytext );}
"["	    {printf( "Separator: %s\n", yytext );}
"]"	    {printf( "Separator: %s\n", yytext );}
"+"	    {printf( "Operator: %s\n", yytext );}
"-"	    {printf( "Operator: %s\n", yytext );}
"*"	    {printf( "Operator: %s\n", yytext );}
"/"	    {printf( "Operator: %s\n", yytext );}
"<"	    {printf( "Operator: %s\n", yytext );}
">"	    {printf( "Operator: %s\n", yytext );}
"<="	{printf( "Operator: %s\n", yytext );}
">="	{printf( "Operator: %s\n", yytext );}
"!="	{printf( "Operator: %s\n", yytext );}
"=="	{printf( "Operator: %s\n", yytext );}
"="     {printf( "Operator: %s\n", yytext );}
"!"	    {printf( "Operator: %s\n", yytext );}
"?"	    {printf( "Operator: %s\n", yytext );}
"==="	{printf( "Operator: %s\n", yytext );}


[ \t]+  	{}
[\n]+ {lines++;}
		 
[+-]?0[0-9]* {printf("Illegal constant at line %d \n", lines);}

[0-9~@#$%^][a-zA-Z0-9]	{printf("Illegal identifier at line %d \n", lines);}

.               {printf("Illegal symbol: %s at line %u", yytext, lines); return -1;}

\'[a-zA-Z0-9] {printf("Expected end of string on line %d\n", lines); }


%% 
void main(int argc,char** argv)
{
if (argc > 1)
{
    FILE *file;
    file = fopen(argv[1], "r");
    if (!file)
    {
        fprintf(stderr, "Could not open %s\n", argv[1]);
        exit(1);
    }
    yyin = file;
}

yylex();
} 